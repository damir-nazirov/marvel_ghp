{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"names":["View","data","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","CharList","props","error","getAllCharacters","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","length","charlist","itemRefs","useRef","onActive","index","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","CSSTransition","in","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","CharInfo","charId","CharSearchForm","getCharacterByName","errorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","ErrorBoundary","state","errorInfo","console","log","this","setState","children","MainPage","selectedChar","Helmet","content","decoration","img","margin","display","width","height","objectFit","request","useCallback","url","a","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","getAllComicses","res","_transformComicses","getComic","_transformComic","title","pageCount","path","extension","language","textObjects","price","prices","comicses","_transformCharacter","slice","urls","Skeleton"],"mappings":"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","file":"static/js/6.0e7a599e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({})\n\n    const { getCharacter, clearError, process, setProcess} = useMarvelService();\n\n\n    useEffect(() => {\n        updateChar();\n// eslint-disable-next-line\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n        // setLoading(false)\n    }\n\n    // const onCharLoading = () => {\n    //     setLoading(true)\n    // }\n\n    // const onError = () => {\n    //     setLoading(false)\n    //     setError(true)\n    // }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        // onCharLoading();\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n            // .catch(onError);\n    }\n\n\n\n\n\n\n\n\n\n        // const errorMessage = error ? <ErrorMessage /> : null;\n        // const spinner = loading ? <Spinner/> : null;\n        // const content = !(loading || error) ? <View char={char}/> : null;\n\n        return (\n            <div className=\"randomchar\">\n               {setContent(process, View, char)}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button onClick={updateChar} className=\"button button__main\">\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n    \n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef, useMemo} from 'react';\nimport PropTypes from 'prop-types';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>\n        case 'confirmed':\n            return <Component/>\n        case 'error':\n            return <ErrorMessage/>\n            \n    \n        default:\n            throw new Error('Unexpected process state')\n    }\n}\n\nconst CharList = (props) => {\n\n    const { error, getAllCharacters, process, setProcess} = useMarvelService()\n\n    const [charList, setCharList] = useState([])\n    const [newItemLoading, setNewItemLoading] = useState(false)\n    const [offset, setOffset] = useState(210)\n    const [charEnded, setCharEnded] = useState(false)\n\n\n   useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n   }, [])\n\n   const onRequest = (offset, initial) => {\n        initial? setNewItemLoading(false) : setNewItemLoading(true)\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList((charlist) => [...charlist, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset((offset) => offset + 9);\n        setCharEnded(ended)\n    }\n\n\n    const itemRefs = useRef([]);\n\n    const onActive = (index) => {\n        itemRefs.current.forEach((item) => {\n                item.classList.remove('char__item_selected');\n              \n        })\n        itemRefs.current[index].classList.add('char__item_selected')\n        itemRefs.current[index].focus( )\n    }\n\n\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems  (arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition in={!error} key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            onActive(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                onActive(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n\n    const elements = useMemo(() => {\n       return setContent(process, () => renderItems(charList), newItemLoading)\n       // eslint-disable-next-line\n    }, [process])\n\n\n        return (\n            <div className=\"char__list\">\n\n                {elements}\n                <button \n                    className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    style={{'display': charEnded ? 'none' : 'block'}}\n                    onClick={() => onRequest(offset)}>\n                    <div className=\"inner\">{!newItemLoading ? 'load more' : 'loading...'}</div>\n                </button>\n            </div>\n        )\n    }\n\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n};\n\nexport default CharList\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n    // const [loading, setLoading] = useState(false);\n    // const [error, setError] = useState(false)\n\n    const { getCharacter, clearError, process, setProcess} = useMarvelService()\n\n    // const marvelService = new MarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line\n    }, [props.charId])\n\n\n   const updateChar = () => {\n     \n\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n             clearError();\n             getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n        \n    }\n\n\n\n    \n        // const skeleton = char || loading || error ? null : <Skeleton/>;\n        // const errorMessage = error ? <ErrorMessage/> : null;\n        // const spinner = loading ? <Spinner/> : null;\n        // const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n\n\n        return (\n            <div className=\"char__info\">\n                {setContent(process, View, char)}\n\n                {/* {skeleton}\n                {errorMessage}\n                {spinner}\n                {content} */}\n            </div>\n        )\n    \n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }                \n            </ul>\n        </>\n    )\n}\n\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\nexport default CharInfo;","import {useState} from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {Link} from 'react-router-dom';\n\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const {process, setProcess, getCharacterByName, clearError} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    \n    const results = !char ? null : char.length > 0 ?\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div> : \n                    <div className=\"char__search-error\">\n                        The character was not found. Check the name and try again\n                    </div>;\n\n\n\n\n\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues = {{\n                    charName: ''\n                }}\n                validationSchema = {Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit = { ({charName}) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field \n                            id=\"charName\" \n                            name='charName' \n                            type='text' \n                            placeholder=\"Enter name\"/>\n                        <button \n                            type='submit' \n                            className=\"button button__main\"\n                            disabled={process === 'loading'}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    // static getDerivedStateFromError(error) { // этот метод только лишь обновляет стэйт и ничего больше\r\n    //     return {error: true}  // Если вкратце, то статические свойства — это свойства класса, а не экземпляра класса.\r\n    // }\r\n\r\n    componentDidCatch(error, errorInfo){\r\n        console.log(error, errorInfo);// данный метод не только меняет стэйт , но так же может \r\n        // работать с error и errorInfo, например вывести их в консоль или отправить ошибки на сервер для инфы\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n        return this.props.children;\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default ErrorBoundary","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\"\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null)\r\n    \r\n    const onCharSelected = (id) => {\r\n       setChar(id)\r\n       }\r\n   \r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                    />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n                <div className=\"char__content\">\r\n                    <ErrorBoundary>\r\n                        <CharList onCharSelected={onCharSelected}/>\r\n                    </ErrorBoundary>\r\n                    <div>\r\n                        <ErrorBoundary>\r\n                            <CharInfo charId={selectedChar}/>\r\n                        </ErrorBoundary>\r\n                        <ErrorBoundary>\r\n                            <CharSearchForm/>\r\n                        </ErrorBoundary>\r\n                    </div>\r\n                   \r\n                    \r\n                </div>\r\n                <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={img} alt=\"Error\" style={{margin: '0 auto', display: 'block',\r\n    width: '250px', height: '250px', objectFit: 'contain'}}/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\n\r\nconst useMarvelService = () => {\r\n        const {request, clearError, process, setProcess} = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\r\n    // _apiKey = 'apikey=d2e43c5e49396e7f69511865981d1f12';// Дамир\r\n    const _apiKey = 'apikey=2fead75cd04e58731e687d08f2b87a6c'; // Артём\r\n\r\n\r\n    const _baseOffset = 210;\r\n    const _baseComicsesOffset = 200;\r\n\r\n    // const comicsRequest = 'https://gateway.marvel.com:443/v1/public/comics?limit=8&offset=200&apikey=2fead75cd04e58731e687d08f2b87a6c'\r\n\r\n    const getAllComicses = async (offset = _baseComicsesOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComicses);\r\n    }\r\n\r\n    //https://gateway.marvel.com:443/v1/public/comics/84124?apikey=2fead75cd04e58731e687d08f2b87a6c\r\n\r\n    // const getComic = async (id) => {\r\n    //     const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    //     return res.data.results[0].map(_transformComicses);\r\n    // }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComic(res.data.results[0])\r\n\r\n    }\r\n\r\n    const _transformComic = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} pages` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const _transformComicses = (comicses) => {\r\n        return {\r\n            id: comicses.id,\r\n            title: comicses.title,\r\n            // description: comicses.textObjects[0].text || 'There is no description for this comic',\r\n            // comicDescription: comicses.description || 'There is no description for this comic',\r\n            thumbnail: comicses.thumbnail.path + '.' + comicses.thumbnail.extension,\r\n            pageCount: comicses.pageCount,\r\n            // language: comicses.textObjects[0].language || 'en-us',\r\n            price: comicses.prices[0].price ? `${comicses.prices[0].price} $` : 'Comics not available'\r\n        }\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n   const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        \r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    // https://gateway.marvel.com:443/v1/public/characters?name=thor&apikey=2fead75cd04e58731e687d08f2b87a6c\r\n\r\n    // apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n    \r\n    // const getCharacterByName = async (name) => {\r\n    //     const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    //     return res.data.results.map(_transformCharacter);\r\n    // }\r\n        \r\n     \r\n       \r\n    \r\n\r\n   const _transformCharacter = (char) => {\r\n      \r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    return {\r\n        process, \r\n        setProcess, \r\n        getCharacter, \r\n        getAllCharacters, \r\n        getAllComicses, \r\n        getComic, \r\n        getCharacterByName,         \r\n        clearError}\r\n}\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { useHttp } from \"../hooks/http.hook\";\r\n\r\n\r\n// const  useMarvelService = () => {\r\n//         const {loading, request, error} = useHttp();\r\n\r\n//  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\r\n//  const _apiKey = 'apikey=d2e43c5e49396e7f69511865981d1f12';\r\n\r\n//  const _baseOffset = 210;\r\n\r\n\r\n\r\n// const getAllCharacters = async (offset = _baseOffset) => {\r\n//     const res = await request(`${_apiBase}/characters?limit=9&offset=${offset}&${_apiKey}`);\r\n//     return res.data.results.map(_transformCharacter)\r\n\r\n// }\r\n\r\n\r\n\r\n// const getCharacter = async (id) => {\r\n//     const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n//     return  _transformCharacter (res.data.results[0])\r\n\r\n// }\r\n\r\n// const _transformCharacter  = (char) => {\r\n//       return {\r\n//             id: char.id,\r\n//             name: char.name,\r\n//             description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n//             thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n//             homepage: char.urls[0].url,\r\n//             wiki: char.urls[1].url,\r\n//             comics: char.comics.items\r\n\r\n//     }      \r\n// }\r\n\r\n\r\n//         return {loading, error, getCharacter, getAllCharacters}\r\n\r\n// }\r\n\r\n// export default useMarvelService;\r\n\r\n\r\n// // path: \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available\"\r\n\r\n// // \"http://i.annihil.us/u/prod/marvel/i/mg/9/20/4ce5a531089da\"\r\n\r\n// // заменить cover на contain","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method ='GET', body = null, headers = {'Content-Type': 'application/json' }) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers})\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n    \r\n            const data = await response.json();\r\n\r\n           \r\n            return data;\r\n        } \r\n        catch(e) {\r\n            setProcess('error')\r\n            throw e\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setProcess('loading'), []);\r\n\r\n    return { request,  clearError, process, setProcess}\r\n}\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">\nPlease select a character on the left to see more information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\nimport Skeleton from \"../components/skeleton/Skeleton\";\r\nimport Spinner from \"../components/spinner/Spinner\";\r\n\r\n\r\nconst setContent = (process, Component, data) => {\r\n\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>\r\n        case 'loading':\r\n            return <Spinner/>\r\n        case 'confirmed':\r\n            return <Component data={data}/>\r\n        case 'error':\r\n            return <ErrorMessage/>\r\n            \r\n    \r\n        default:\r\n            throw new Error('Unexpected process state')\r\n    }\r\n    \r\n}    \r\n\r\n\r\nexport default setContent;\r\n"],"sourceRoot":""}